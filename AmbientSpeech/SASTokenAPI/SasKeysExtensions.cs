// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AmbientSpeech;
using AmbientSpeech.Models;
using Microsoft.Rest;

namespace AmbientSpeech
{
    public static partial class SasKeysExtensions
    {
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        public static string GetEventHubsByNamespace(this ISasKeys operations, string serviceNamespace)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISasKeys)s).GetEventHubsByNamespaceAsync(serviceNamespace);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetEventHubsByNamespaceAsync(this ISasKeys operations, string serviceNamespace, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetEventHubsByNamespaceWithOperationResponseAsync(serviceNamespace, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        /// <param name='eventHub'>
        /// Required.
        /// </param>
        public static string GetKeyNames(this ISasKeys operations, string serviceNamespace, string eventHub)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISasKeys)s).GetKeyNamesAsync(serviceNamespace, eventHub);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        /// <param name='eventHub'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetKeyNamesAsync(this ISasKeys operations, string serviceNamespace, string eventHub, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetKeyNamesWithOperationResponseAsync(serviceNamespace, eventHub, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        public static string GetRegisteredNamespaces(this ISasKeys operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISasKeys)s).GetRegisteredNamespacesAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetRegisteredNamespacesAsync(this ISasKeys operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetRegisteredNamespacesWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='keyRegistration'>
        /// Required.
        /// </param>
        public static string Post(this ISasKeys operations, SASKeyRegistration keyRegistration)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISasKeys)s).PostAsync(keyRegistration);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasKeys.
        /// </param>
        /// <param name='keyRegistration'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> PostAsync(this ISasKeys operations, SASKeyRegistration keyRegistration, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.PostWithOperationResponseAsync(keyRegistration, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
