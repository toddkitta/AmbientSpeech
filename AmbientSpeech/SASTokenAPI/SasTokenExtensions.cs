// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using AmbientSpeech;
using Microsoft.Rest;

namespace AmbientSpeech
{
    public static partial class SasTokenExtensions
    {
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasToken.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        /// <param name='eventHub'>
        /// Required.
        /// </param>
        /// <param name='keyName'>
        /// Required.
        /// </param>
        /// <param name='publisherId'>
        /// Required.
        /// </param>
        /// <param name='transport'>
        /// Optional.
        /// </param>
        public static string GetToken(this ISasToken operations, string serviceNamespace, string eventHub, string keyName, string publisherId, string transport = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ISasToken)s).GetTokenAsync(serviceNamespace, eventHub, keyName, publisherId, transport);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the AmbientSpeech.ISasToken.
        /// </param>
        /// <param name='serviceNamespace'>
        /// Required.
        /// </param>
        /// <param name='eventHub'>
        /// Required.
        /// </param>
        /// <param name='keyName'>
        /// Required.
        /// </param>
        /// <param name='publisherId'>
        /// Required.
        /// </param>
        /// <param name='transport'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<string> GetTokenAsync(this ISasToken operations, string serviceNamespace, string eventHub, string keyName, string publisherId, string transport = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<string> result = await operations.GetTokenWithOperationResponseAsync(serviceNamespace, eventHub, keyName, publisherId, transport, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
